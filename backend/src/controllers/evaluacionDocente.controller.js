import{
createEvaluacionDocenteService,
getEvaluacionDocenteService,
getAllEvaluacionesDocenteService,
getEvaluacionesByDocenteService,
updateEvaluacionDocenteService,
updateEvaluacionByIdService,
deleteEvaluacionDocenteService,
createEvaluacionByAlumnoService,
getDocentesListService,
getAsignaturasListService,
deleteEvaluacionByIdService
} from '../services/evaluacionDocente.service.js';
import { evaluacionDocenteQueryValidation, evaluacionDocenteBodyValidation, createEvaluacionAlumnoValidation } from '../validations/evaluacionDocente.validation.js';
import { handleSuccess, handleErrorClient, handleErrorServer } from "../handlers/responseHandlers.js";

export async function createEvaluacionDocente(req, res) {
    try {
        const evaluacionDocente = req.body;

        const { value, error } = evaluacionDocenteBodyValidation.validate(evaluacionDocente);

        if (error) return handleErrorClient(res, 400, "Error de validaci√≥n", error.message);

        const [newEvaluacionDocente, errorNewEvaluacionDocente] = await createEvaluacionDocenteService(value);

        if (errorNewEvaluacionDocente) return handleErrorClient(res, 400, "Error registrando la evaluaci√≥n docente", errorNewEvaluacionDocente);

        handleSuccess(res, 201, "Evaluaci√≥n docente registrada con √©xito", newEvaluacionDocente);
    } catch (error) {
        handleErrorServer(res, 500, error.message);
    }
}

export async function getEvaluacionDocente(req, res) {
    try {
        const evaluacionDocenteQuery = req.query;

        const { errorQuery } = evaluacionDocenteQueryValidation.validate(evaluacionDocenteQuery);

        if (errorQuery) return handleErrorClient(res, 400, "Error de validaci√≥n", errorQuery.message);

        const [evaluacionDocente, errorEvaluacionDocente] = await getEvaluacionDocenteService(evaluacionDocenteQuery);

        if (errorEvaluacionDocente) return handleErrorClient(res, 404, "Evaluaci√≥n docente no encontrada", errorEvaluacionDocente);

        handleSuccess(res, 200, "Evaluaci√≥n docente encontrada", evaluacionDocente);
    } catch (error) {
        handleErrorServer(res, 500, error.message);
    }
}

export async function getAllEvaluacionesDocente(req, res) {
    try {
        const [evaluacionesDocente, errorEvaluacionesDocente] = await getAllEvaluacionesDocenteService();

        if (errorEvaluacionesDocente) return handleErrorClient(res, 404, "No hay evaluaciones docentes registradas", errorEvaluacionesDocente);

        handleSuccess(res, 200, "Evaluaciones docentes encontradas", evaluacionesDocente);
    } catch (error) {
        handleErrorServer(res, 500, error.message);
    }
}

export async function updateEvaluacionDocente(req, res) {
    try {
        const evaluacionDocenteQuery = req.query;

        const { errorQuery } = evaluacionDocenteQueryValidation.validate(evaluacionDocenteQuery);

        if (errorQuery) return handleErrorClient(res, 400, "Error de validaci√≥n en la consulta", errorQuery.message);

        const { value, errorBody } = evaluacionDocenteBodyValidation.validate(req.body);

        if (errorBody) return handleErrorClient(res, 400, "Error de validaci√≥n en el cuerpo", errorBody.message);

        const [updatedEvaluacionDocente, errorUpdatedEvaluacionDocente] = await updateEvaluacionDocenteService(evaluacionDocenteQuery, value);

        if (errorUpdatedEvaluacionDocente) return handleErrorClient(res, 404, "Evaluaci√≥n docente no encontrada", errorUpdatedEvaluacionDocente);

        handleSuccess(res, 200, "Evaluaci√≥n docente actualizada con √©xito", updatedEvaluacionDocente);
    } catch (error) {
        handleErrorServer(res, 500, error.message);
    }
}

export async function deleteEvaluacionDocente(req, res) {
    try {
        const evaluacionDocenteQuery = req.query;

        const { errorQuery } = evaluacionDocenteQueryValidation.validate(evaluacionDocenteQuery);

        if (errorQuery) return handleErrorClient(res, 400, "Error de validaci√≥n", errorQuery.message);

        const [deletedEvaluacionDocente, errorDeletedEvaluacionDocente] = await deleteEvaluacionDocenteService(evaluacionDocenteQuery);

        if (errorDeletedEvaluacionDocente) return handleErrorClient(res, 404, "Evaluaci√≥n docente no encontrada", errorDeletedEvaluacionDocente);

        handleSuccess(res, 200, "Evaluaci√≥n docente eliminada con √©xito", deletedEvaluacionDocente);
    } catch (error) {
        handleErrorServer(res, 500, error.message);
    }
}

export async function createEvaluacionByAlumno(req, res) {
    try {
        console.log('üìù Datos recibidos:', req.body);
        console.log('üë§ Usuario autenticado:', req.user);
        
        const evaluacionData = req.body;
        const alumnoId = req.user._id; // Obtener del JWT
        const alumnoNombre = req.user.nombreCompleto;

        // Validar los datos de entrada
        console.log('üîç Validando datos:', evaluacionData);
        const { value, error } = createEvaluacionAlumnoValidation.validate(evaluacionData);
        
        if (error) {
            console.log('‚ùå Error de validaci√≥n:', error.message);
            return handleErrorClient(res, 400, "Error de validaci√≥n", error.message);
        }

        console.log('‚úÖ Validaci√≥n exitosa:', value);

        // Agregar informaci√≥n del alumno autenticado
        value.alumno = alumnoNombre;

        console.log('üöÄ Enviando al servicio:', value);
        const [newEvaluacion, errorEvaluacion] = await createEvaluacionByAlumnoService(value, alumnoId);

        if (errorEvaluacion) {
            console.log('‚ùå Error del servicio:', errorEvaluacion);
            return handleErrorClient(res, 400, "Error creando evaluaci√≥n", errorEvaluacion);
        }

        console.log('‚úÖ Evaluaci√≥n creada exitosamente:', newEvaluacion);
        handleSuccess(res, 201, "Evaluaci√≥n creada exitosamente", newEvaluacion);
    } catch (error) {
        console.log('üí• Error inesperado:', error);
        handleErrorServer(res, 500, error.message);
    }
}

export async function getEvaluacionesByDocente(req, res) {
    try {
        const docenteNombre = req.user.nombreCompleto; // Obtener del JWT

        const [evaluaciones, error] = await getEvaluacionesByDocenteService(docenteNombre);

        if (error) return handleErrorClient(res, 404, "No se encontraron evaluaciones", error);

        handleSuccess(res, 200, "Evaluaciones encontradas", evaluaciones);
    } catch (error) {
        handleErrorServer(res, 500, error.message);
    }
}

export async function getDocentesList(req, res) {
    try {
        const [docentes, error] = await getDocentesListService();

        if (error) return handleErrorClient(res, 404, "No se encontraron docentes", error);

        handleSuccess(res, 200, "Docentes encontrados", docentes);
    } catch (error) {
        handleErrorServer(res, 500, error.message);
    }
}

export async function getAsignaturasList(req, res) {
    try {
        const [asignaturas, error] = await getAsignaturasListService();

        if (error) return handleErrorClient(res, 404, "No se encontraron asignaturas", error);

        handleSuccess(res, 200, "Asignaturas encontradas", asignaturas);
    } catch (error) {
        handleErrorServer(res, 500, error.message);
    }
}

// Funci√≥n para que administradores obtengan todas las evaluaciones
export async function getAllEvaluacionesForAdmin(req, res) {
    try {
        console.log('üë®‚Äçüíº Administrador solicitando todas las evaluaciones');
        
        const [evaluaciones, errorEvaluaciones] = await getAllEvaluacionesDocenteService();

        if (errorEvaluaciones) {
            console.log('‚ùå Error al obtener evaluaciones:', errorEvaluaciones);
            return handleErrorClient(res, 404, "Error al obtener evaluaciones", errorEvaluaciones);
        }

        console.log('‚úÖ Evaluaciones obtenidas exitosamente:', evaluaciones.length);
        handleSuccess(res, 200, "Evaluaciones obtenidas exitosamente", evaluaciones);
    } catch (error) {
        console.log('üí• Error inesperado:', error);
        handleErrorServer(res, 500, error.message);
    }
}

// Funci√≥n para que administradores eliminen evaluaciones
export async function deleteEvaluacionByAdmin(req, res) {
    try {
        const { id } = req.params;
        console.log('üóëÔ∏è Administrador eliminando evaluaci√≥n ID:', id);
        
        const [evaluacionEliminada, errorEliminacion] = await deleteEvaluacionByIdService(id);

        if (errorEliminacion) {
            console.log('‚ùå Error al eliminar evaluaci√≥n:', errorEliminacion);
            return handleErrorClient(res, 400, "Error al eliminar evaluaci√≥n", errorEliminacion);
        }

        console.log('‚úÖ Evaluaci√≥n eliminada exitosamente');
        handleSuccess(res, 200, "Evaluaci√≥n eliminada exitosamente", evaluacionEliminada);
    } catch (error) {
        console.log('üí• Error inesperado:', error);
        handleErrorServer(res, 500, error.message);
    }
}

// Funci√≥n para aprobar una evaluaci√≥n (solo administradores)
export async function aprobarEvaluacion(req, res) {
    try {
        const { id } = req.params;
        console.log('‚úÖ Administrador aprobando evaluaci√≥n ID:', id);
        
        const [evaluacionAprobada, errorAprobacion] = await updateEvaluacionByIdService(id, { estado: 'aprobada' });

        if (errorAprobacion) {
            console.log('‚ùå Error al aprobar evaluaci√≥n:', errorAprobacion);
            return handleErrorClient(res, 400, "Error al aprobar evaluaci√≥n", errorAprobacion);
        }

        console.log('‚úÖ Evaluaci√≥n aprobada exitosamente');
        handleSuccess(res, 200, "Evaluaci√≥n aprobada exitosamente", evaluacionAprobada);
    } catch (error) {
        console.log('üí• Error inesperado:', error);
        handleErrorServer(res, 500, error.message);
    }
}

// Funci√≥n para rechazar una evaluaci√≥n (solo administradores)
export async function rechazarEvaluacion(req, res) {
    try {
        const { id } = req.params;
        console.log('‚ùå Administrador rechazando evaluaci√≥n ID:', id);
        
        const [evaluacionRechazada, errorRechazo] = await updateEvaluacionByIdService(id, { estado: 'rechazada' });

        if (errorRechazo) {
            console.log('‚ùå Error al rechazar evaluaci√≥n:', errorRechazo);
            return handleErrorClient(res, 400, "Error al rechazar evaluaci√≥n", errorRechazo);
        }

        console.log('‚úÖ Evaluaci√≥n rechazada exitosamente');
        handleSuccess(res, 200, "Evaluaci√≥n rechazada exitosamente", evaluacionRechazada);
    } catch (error) {
        console.log('üí• Error inesperado:', error);
        handleErrorServer(res, 500, error.message);
    }
}