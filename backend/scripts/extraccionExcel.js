import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import xlsx from 'xlsx'; // Importar xlsx correctamente

const { readFile, utils } = xlsx;

// Soporte para __dirname en ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Funci√≥n de extracci√≥n mejorada
export function extractSubjects(data) {
    const subjects = [];

    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        if (!row || row.length < 6) continue; // Aumentamos la validaci√≥n para incluir las nuevas columnas

        const codigo = row[0]?.toString().trim() || '';
        const seccion = parseInt(row[1]) || null;
        const cupos = parseInt(row[2]) || 0;
        const inscritos = parseInt(row[3]) || 0;
        const nombreAsignaturaDocente = row[4]?.toString().trim() || '';
        const [nombreAsignatura, docente] = nombreAsignaturaDocente.split('-').map(s => s.trim());
        
        const bloques = [];
        for (let j = 5; j < row.length; j++) {
            const cell = row[j]?.toString().trim();
            if (!cell) continue;

            // Regex mejorada para extraer tambi√©n la sala
            const regex = /^(TEO|PRA|LAB): ([A-Z]{2,3}) (\d{2}:\d{2}) (\d{2}:\d{2})\s+(.+)$/;
            const match = cell.match(regex);

            if (match) {
                const [, tipo, dia, horaInicio, horaFin, sala] = match;
                bloques.push({ 
                    tipo, 
                    dia, 
                    horaInicio, 
                    horaFin, 
                    sala: sala.trim() 
                });
            }
        }

        // Lista de asignaturas de la malla curricular oficial
        const mallaOficial = [
            "√Ålgebra y Trigonometr√≠a", "Introducci√≥n a la Ingenier√≠a", "Comunicaci√≥n Oral y Escrita",
            "Introducci√≥n a la Programaci√≥n", "Formaci√≥n Integral I", "C√°lculo Diferencial",
            "Qu√≠mica General", "Programaci√≥n Orientada a Objetos", "Estructuras Discretas para Cs. de la Computaci√≥n",
            "Formaci√≥n Integral II", "Formaci√≥n Integral III", "C√°lculo Integral", "√Ålgebra Lineal",
            "F√≠sica Newtoniana", "Estructura de Datos", "Ingl√©s I", "Administraci√≥n General",
            "C√°lculo en Varias Variables", "Ecuaciones Diferenciales", "Electro-magnetismo",
            "Modelamiento de Procesos e Informaci√≥n", "Ingl√©s II", "Formaci√≥n Integral IV",
            "Ondas, √ìptica y F√≠sica Moderna", "Sistemas Digitales", "Fundamentos de las Ciencias de la Computaci√≥n",
            "Teor√≠a de Sistemas", "Ingl√©s III", "Gesti√≥n Contable", "Estad√≠stica y Probabilidades",
            "Econom√≠a", "An√°lisis y Dise√±o de Algoritmos", "Base de Datos", "Ingl√©s IV",
            "Pr√°ctica Profesional 1", "Investigaci√≥n de Operaciones", "Arquitectura de Computadores",
            "Administraci√≥n y Programaci√≥n de Base de Datos", "Sistemas de Informaci√≥n", "Gesti√≥n Estrat√©gica",
            "Formaci√≥n Integral V", "Gesti√≥n Presupuestaria y Financiera", "Legislaci√≥n", "Sistemas Operativos",
            "Inteligencia Artificial", "Ingenier√≠a de Software", "Formulaci√≥n y Evaluaci√≥n de Proyectos",
            "Pr√°ctica Profesional 2", "Anteproyecto de T√≠tulo", "Comunicaci√≥n de Datos y Redes",
            "Electivo Profesional 1", "Electivo Profesional 2", "Electivo Profesional 3",
            "Gesti√≥n de Proyectos de Software", "Gesti√≥n de Recursos Humanos", "Proyecto de T√≠tulo",
            "Seguridad Inform√°tica", "Electivo Profesional 4", "Electivo Profesional 5", "Electivo Profesional 6"
        ];

        // Funci√≥n para normalizar nombres de asignaturas para comparaci√≥n
        const normalizarNombre = (nombre) => {
            return nombre.toLowerCase()
                .normalize("NFD").replace(/[\u0300-\u036f]/g, "") // Remover acentos
                .replace(/[^\w\s]/g, " ") // Reemplazar caracteres especiales con espacios
                .replace(/\s+/g, " ") // M√∫ltiples espacios a uno solo
                .trim();
        };

        // Verificar si la asignatura est√° en la malla curricular
        const nombreNormalizado = normalizarNombre(nombreAsignatura || '');
        const esAsignaturaMalla = mallaOficial.some(asignaturaMalla => {
            const mallaNormalizada = normalizarNombre(asignaturaMalla);
            return nombreNormalizado.includes(mallaNormalizada) || mallaNormalizada.includes(nombreNormalizado);
        });

        // Solo agregar si est√° en la malla curricular
        if (esAsignaturaMalla) {
            subjects.push({
                asignaturaCodigo: codigo,
                seccion,
                cupos,
                inscritos,
                disponibles: cupos - inscritos, // Calculamos los cupos disponibles
                asignatura: nombreAsignatura || '',
                docente: docente || '',
                bloques
            });
        }
    }

    return subjects;
}

// Funci√≥n para procesar archivo Excel desde buffer
export function processExcelFromBuffer(buffer) {
    try {
        const workbook = xlsx.read(buffer, { type: 'buffer' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const excelData = xlsx.utils.sheet_to_json(worksheet, { header: 1 });
        
        return extractSubjects(excelData);
    } catch (error) {
        console.error('Error procesando Excel:', error);
        throw error;
    }
}

// Funci√≥n para procesar archivo Excel desde path
export function processExcelFromPath(filePath) {
    try {
        const workbook = readFile(filePath);
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const excelData = utils.sheet_to_json(worksheet, { header: 1 });
        
        return extractSubjects(excelData);
    } catch (error) {
        console.error('Error procesando Excel:', error);
        throw error;
    }
}

// Ejecutar extracci√≥n si se ejecuta directamente
if (import.meta.url === `file://${process.argv[1]}`) {
    // Ruta al archivo Excel
    // const excelPath = path.join(__dirname, '..', 'public', 'excel_horario_20250705201501.xlsx');
    
    try {
        const extractedSubjects = processExcelFromPath(excelPath);
        //console.log('‚úÖ Extracci√≥n completada');
        //console.log(`üìä Total de asignaturas extra√≠das: ${extractedSubjects.length}`);
        
        // Guardar como JSON
        fs.writeFileSync('output.json', JSON.stringify(extractedSubjects, null, 2), 'utf8');
        //console.log('üíæ Datos guardados en output.json');
    } catch (error) {
        console.error('‚ùå Error en la extracci√≥n:', error);
    }
}
