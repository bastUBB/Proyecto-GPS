import EvaluacionDocente from '../src/models/evaluacionDocente.model.js';
import User from '../src/models/user.model.js';
import Asignatura from '../src/models/asignaturas.model.js';
import RendimientoAsignatura from '../src/models/rendimientoAsignatura.model.js';

// Funci√≥n para generar un n√∫mero aleatorio entre min y max
function random(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Funci√≥n para generar nombres de estudiantes ficticios
function generarNombreEstudiante() {
    const nombres = [
        "Ana Garc√≠a", "Carlos Rodr√≠guez", "Mar√≠a Gonz√°lez", "Juan P√©rez", "Luis Mart√≠n",
        "Carmen L√≥pez", "Jos√© Fern√°ndez", "Isabel S√°nchez", "Miguel Torres", "Laura Ruiz",
        "Antonio Moreno", "Pilar Jim√©nez", "Francisco Mu√±oz", "Rosa √Ålvarez", "Manuel Romero",
        "Elena Navarro", "Pedro Guti√©rrez", "Luc√≠a Herrera", "√Ångel Vargas", "Cristina Ramos",
        "Ra√∫l Castillo", "M√≥nica Ortega", "Sergio Delgado", "Patricia Castro", "Alberto Ortiz"
    ];
    
    return nombres[random(0, nombres.length - 1)];
}

// Funci√≥n para generar una calificaci√≥n realista (1-7)
function generarCalificacion() {
    // Generar calificaciones m√°s realistas con distribuci√≥n normal hacia el centro
    const base = Math.random();
    if (base < 0.1) return random(1, 3); // 10% notas bajas
    if (base < 0.8) return random(4, 6); // 70% notas medias  
    return 7; // 20% nota m√°xima
}

// Funci√≥n para generar un comentario aleatorio
function generarComentario() {
    const comentarios = [
        "Excelente profesor, muy claro en sus explicaciones.",
        "Las clases son muy din√°micas y entretenidas.",
        "Domina muy bien la materia y transmite conocimiento.",
        "Profesor muy dedicado y siempre dispuesto a ayudar.",
        "Metodolog√≠a clara y efectiva para el aprendizaje.",
        "Muy buena disposici√≥n para resolver dudas.",
        "Las evaluaciones son justas y acordes al contenido.",
        "Profesor comprometido con el proceso de ense√±anza.",
        "Genera un buen ambiente de aprendizaje en clase.",
        "Muy puntual y responsable con los horarios.",
        "Utiliza buenos recursos did√°cticos.",
        "Fomenta la participaci√≥n activa de los estudiantes.",
        "Tiene paciencia para explicar conceptos dif√≠ciles.",
        "Relaciona bien la teor√≠a con la pr√°ctica.",
        "Mantiene el inter√©s de los estudiantes durante la clase.",
        "Muy organizado en la presentaci√≥n de contenidos.",
        "Profesor actualizado en su √°rea de conocimiento.",
        "Brinda retroalimentaci√≥n constructiva.",
        "Crea un ambiente de respeto y confianza.",
        "Motiva a los estudiantes a seguir aprendiendo."
    ];
    
    return comentarios[random(0, comentarios.length - 1)];
}// Funci√≥n principal para crear evaluaciones docentes
export async function crearEvaluacionesDocentes() {
    try {
        console.log('üöÄ Iniciando creaci√≥n de evaluaciones docentes...');

        // Obtener todos los datos de rendimiento
        const rendimientos = await RendimientoAsignatura.find({});

        if (rendimientos.length === 0) {
            console.log('‚ö†Ô∏è No se encontraron datos de rendimiento. Ejecuta primero procesarDatosRendimiento.js');
            return;
        }

        console.log(`üìä Se encontraron ${rendimientos.length} registros de rendimiento`);

        // Debug: mostrar algunos registros de ejemplo
        if (rendimientos.length > 0) {
            console.log('üîç Ejemplo de registro de rendimiento:');
            console.log(JSON.stringify(rendimientos[0], null, 2));
        }

        // Crear un mapa de profesores √∫nicos con sus asignaturas por a√±o
        const profesorAsignaturas = new Map();

        for (const rendimiento of rendimientos) {
            const nombreDocente = rendimiento.docente;
            const nombreAsignatura = rendimiento.asignatura;
            const a√±o = rendimiento.a√±o;
            const semestre = rendimiento.semestre;

            // Validar que tengamos datos v√°lidos
            if (!nombreDocente || !nombreAsignatura || !a√±o) {
                console.log(`‚ö†Ô∏è Registro con datos incompletos: docente="${nombreDocente}", asignatura="${nombreAsignatura}", a√±o="${a√±o}"`);
                continue;
            }

            const claveProfesor = nombreDocente;

            if (!profesorAsignaturas.has(claveProfesor)) {
                profesorAsignaturas.set(claveProfesor, {
                    nombre: nombreDocente,
                    asignaturasPorA√±o: new Map()
                });
            }

            const profesorData = profesorAsignaturas.get(claveProfesor);

            if (!profesorData.asignaturasPorA√±o.has(a√±o)) {
                profesorData.asignaturasPorA√±o.set(a√±o, new Set());
            }

            profesorData.asignaturasPorA√±o.get(a√±o).add(nombreAsignatura);
        }

        console.log(`üë®‚Äçüè´ Se encontraron ${profesorAsignaturas.size} profesores √∫nicos`);

        // Debug: mostrar profesores encontrados
        console.log('üîç Profesores en datos de rendimiento:');
        for (const [nombre, data] of profesorAsignaturas) {
            const totalAsignaturas = Array.from(data.asignaturasPorA√±o.values())
                .reduce((total, asignaturas) => total + asignaturas.size, 0);
            const a√±os = Array.from(data.asignaturasPorA√±o.keys()).sort();
            console.log(`   - ${nombre} (${totalAsignaturas} asignaturas en a√±os: ${a√±os.join(', ')})`);
        }

        // Verificar que existan usuarios profesores (para validaci√≥n, pero no los usaremos directamente)
        const profesores = await User.find({ role: 'profesor' });
        console.log(`üë• Se encontraron ${profesores.length} usuarios con rol profesor en la BD`);

        // Obtener todas las asignaturas (para validaci√≥n, pero no las usaremos directamente)
        const asignaturas = await Asignatura.find({});
        console.log(`üìö Se encontraron ${asignaturas.length} asignaturas en la BD`);

        const evaluacionesCreadas = [];
        let totalEvaluaciones = 0;

        // Para cada profesor en los datos de rendimiento
        for (const [nombreDocente, profesorData] of profesorAsignaturas) {
            // Validar que el nombre del docente no sea undefined o vac√≠o
            if (!nombreDocente || nombreDocente.trim() === '') {
                console.log(`‚ö†Ô∏è Nombre de docente vac√≠o o undefined, saltando...`);
                continue;
            }

            console.log(`‚úÖ Procesando profesor: ${nombreDocente}`);

            // Para cada a√±o que ense√±√≥ este profesor
            for (const [a√±o, asignaturasDelA√±o] of profesorData.asignaturasPorA√±o) {
                console.log(`üìÖ Procesando a√±o ${a√±o} para ${nombreDocente}`);

                // Para cada asignatura que ense√±√≥ en ese a√±o
                for (const nombreAsignatura of asignaturasDelA√±o) {
                    if (!nombreAsignatura || nombreAsignatura.trim() === '') {
                        console.log(`‚ö†Ô∏è Nombre de asignatura vac√≠o, saltando...`);
                        continue;
                    }

                    console.log(`üìö Procesando: ${nombreDocente} -> ${nombreAsignatura} (${a√±o})`);

                    // Verificar si ya existe una evaluaci√≥n para este profesor-asignatura
                    const evaluacionExistente = await EvaluacionDocente.findOne({
                        docente: nombreDocente,
                        asignatura: nombreAsignatura
                    });

                    if (evaluacionExistente) {
                        console.log(`‚ö†Ô∏è Ya existe evaluaci√≥n para ${nombreDocente} en ${nombreAsignatura}`);
                        continue;
                    }

                    // Generar entre 3 y 8 evaluaciones por profesor-asignatura
                    const numeroEvaluaciones = random(3, 8);

                    for (let i = 0; i < numeroEvaluaciones; i++) {
                        const comentario = generarComentario();
                        const calificacion = generarCalificacion();
                        const nombreAlumno = generarNombreEstudiante();

                        // Estados disponibles seg√∫n el modelo: 'pendiente', 'aprobada', 'rechazada'
                        const estados = ['pendiente', 'aprobada', 'rechazada'];
                        const estado = estados[random(0, estados.length - 1)];
                        
                        // Visibilidades disponibles: 'An√≥nima' y 'P√∫blica'  
                        const visibilidades = ['An√≥nima', 'P√∫blica'];
                        const visibilidad = visibilidades[random(0, visibilidades.length - 1)];

                        // Usar el a√±o de los datos de rendimiento para generar fechas m√°s realistas
                        const a√±oEvaluacion = parseInt(a√±o);

                        const nuevaEvaluacion = new EvaluacionDocente({
                            docente: nombreDocente,
                            alumno: nombreAlumno,
                            asignatura: nombreAsignatura,
                            visibilidad: visibilidad,
                            fecha: new Date(
                                a√±oEvaluacion,
                                random(0, 11),
                                random(1, 28)
                            ),
                            texto: comentario || "Sin comentarios adicionales",
                            calificacion: calificacion,
                            estado: estado
                        });

                        evaluacionesCreadas.push(nuevaEvaluacion);
                        totalEvaluaciones++;
                    }
                }
            }
        }

        // Guardar todas las evaluaciones en lotes
        if (evaluacionesCreadas.length > 0) {
            console.log(`üíæ Guardando ${evaluacionesCreadas.length} evaluaciones...`);

            const batchSize = 100;
            for (let i = 0; i < evaluacionesCreadas.length; i += batchSize) {
                const batch = evaluacionesCreadas.slice(i, i + batchSize);
                await Promise.all(batch.map(evaluacion => evaluacion.save()));
                console.log(`‚úÖ Guardado lote ${Math.floor(i / batchSize) + 1}/${Math.ceil(evaluacionesCreadas.length / batchSize)}`);
            }
        }

        console.log(`\n‚úÖ Proceso completado exitosamente!`);
        console.log(`üìä Estad√≠sticas:`);
        console.log(`   - Profesores procesados: ${profesorAsignaturas.size}`);
        console.log(`   - Evaluaciones creadas: ${totalEvaluaciones}`);
        console.log(`   - Asignaturas evaluadas: ${new Set(evaluacionesCreadas.map(e => e.asignatura)).size}`);

    } catch (error) {
        console.error('‚ùå Error al crear evaluaciones docentes:', error);
        throw error;
    }
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
    crearEvaluacionesDocentes()
        .then(() => {
            console.log('‚úÖ Script ejecutado correctamente');
        })
        .catch(error => {
            console.error('‚ùå Error en el script:', error);
        });
}
